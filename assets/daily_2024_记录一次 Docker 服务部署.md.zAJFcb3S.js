import{_ as s,o as a,c as i,R as e}from"./chunks/framework.6kMW32Hq.js";const b=JSON.parse('{"title":"记录一次 Docker 服务部署","description":"","frontmatter":{},"headers":[],"relativePath":"daily/2024/记录一次 Docker 服务部署.md","filePath":"daily/2024/记录一次 Docker 服务部署.md","lastUpdated":1712830049000}'),n={name:"daily/2024/记录一次 Docker 服务部署.md"},l=e(`<h1 id="记录一次-docker-服务部署" tabindex="-1">记录一次 Docker 服务部署 <a class="header-anchor" href="#记录一次-docker-服务部署" aria-label="Permalink to &quot;记录一次 Docker 服务部署&quot;">​</a></h1><h2 id="打包-docker-镜像" tabindex="-1">打包 Docker 镜像 <a class="header-anchor" href="#打包-docker-镜像" aria-label="Permalink to &quot;打包 Docker 镜像&quot;">​</a></h2><h3 id="正确的写一个-dockerfile" tabindex="-1">正确的写一个 Dockerfile <a class="header-anchor" href="#正确的写一个-dockerfile" aria-label="Permalink to &quot;正确的写一个 Dockerfile&quot;">​</a></h3><blockquote><p>一个基于 <code>Node</code> 服务的 <code>LLM Chat</code> 项目</p></blockquote><div class="language-docker vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:16-alpine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> package*.json ./</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm run build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> node:16-alpine</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /usr/src/app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=builder /app/dist ./dist</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=builder /app/package*.json ./</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> --from=builder /app/.env ./</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SKIP_HUSKY=true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> npm install --only=production</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 3000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol><li><p>使用 <strong><code>node alpine</code></strong> 镜像，阉割了很多不需要的 <code>linux</code> 功能，是镜像体积大幅减小</p></li><li><p>先复制 <strong><code>package.json</code></strong> 文件 <strong><code>npm install</code></strong> ，再复制项目</p><blockquote><p><code>docker</code> 是分层存储的，<code>Dockerfile</code> 的每一行指令是一层，会有缓存，会从有变化的层开始构建，当 <code>package.json</code> 无变化时，不会执行 <code>npm install</code> ，会直接复用。</p></blockquote></li><li><p>分阶段构建，将打包后的产物用于发布，避免源码的直接使用</p></li></ol><h3 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project:1.0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><strong><code>docker build</code></strong>: 用于构建 <code>Docker</code> 镜像，会根据当前目录下的 <strong><code>Dockerfile</code></strong> 文件构建一个 <code>Docker</code> 镜像</li><li><strong><code>-t my-project:1.0.1</code></strong>: 用于指定要构建的镜像的名称和标签。<code>my-project</code> 是镜像的名称，<code>1.0.1</code> 是标签。标签用于标识镜像的特定版本或标识符</li><li><strong><code>.</code></strong>: 这是构建上下文的路径。<code>Docker</code> 在构建镜像时需要访问一个上下文，以获取构建所需的所有文件和信息, <strong><code>.</code></strong> 表示当前目录是构建上下文</li></ol><h2 id="上传-docker-镜像到服务器中" tabindex="-1">上传 Docker 镜像到服务器中 <a class="header-anchor" href="#上传-docker-镜像到服务器中" aria-label="Permalink to &quot;上传 Docker 镜像到服务器中&quot;">​</a></h2><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./my-project.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project:1.0.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./my-project.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx@x.x.x.x:/root/images/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li><strong><code>docker save</code></strong>: 用于将一个或多个 <code>Docker</code> 镜像打包成一个 <code>tar</code> 压缩文件</li><li><strong><code>o ./my-project.tar</code></strong>: 指定输出文件的路径和名称。这里将 <code>Docker</code> 镜像保存为 <strong><code>my-project.tar</code></strong></li><li><strong><code>my-project:1.0.1</code></strong>: 要保存的 <code>Docker</code> 镜像的名称和标签, 在这个例子中是 <strong><code>my-project</code></strong> 仓库下的 <strong><code>1.0.1</code></strong> 版本</li><li><strong><code>scp</code></strong>: 用于在本地主机和远程主机之间安全地复制文件</li><li><strong><code>./my-project.tar</code></strong>: 要传输的本地文件路径和名称，即第一个打包的压缩文件</li><li><strong><code>xxx@x.x.x.x:/root/images/</code></strong>: 目标主机的用户名（<strong><code>root</code></strong>）、<code>IP</code> 地址（<strong><code>x.x.x.x</code></strong>）以及目标路径。将文件传输到远程主机的 <strong><code>/root/images/</code></strong> 目录下</li></ol><h2 id="部署-docker-镜像" tabindex="-1">部署 Docker 镜像 <a class="header-anchor" href="#部署-docker-镜像" aria-label="Permalink to &quot;部署 Docker 镜像&quot;">​</a></h2><h3 id="连接远程服务器" tabindex="-1">连接远程服务器 <a class="header-anchor" href="#连接远程服务器" aria-label="Permalink to &quot;连接远程服务器&quot;">​</a></h3><blockquote><p>这里使用的 <code>ssh</code> 链接服务器</p></blockquote><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx@x.x.x.x</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入目录查看</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root/images/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>登录远程服务器</li><li>找到镜像位置，确定镜像文件</li></ol><h3 id="加载镜像" tabindex="-1">加载镜像 <a class="header-anchor" href="#加载镜像" aria-label="Permalink to &quot;加载镜像&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 my-project.tar 所在的目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images/my-project.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li><strong><code>docker load</code></strong>: 用于将上面使用 <strong><code>docker save</code></strong> 导出的 <code>Docker</code> 镜像加载到 <code>Docker</code></li><li><strong><code>i images/myproject.tar</code></strong>: 指定输入文件，即包含 <code>Docker</code> 镜像的 <code>tar</code> 压缩文件</li></ol><h3 id="打标签" tabindex="-1">打标签 <a class="header-anchor" href="#打标签" aria-label="Permalink to &quot;打标签&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project:1.0.1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project:latest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><strong><code>docker tag</code></strong>: 用于为 <code>Docker</code> 镜像打标签</li><li><strong><code>myproject:1.0.1</code></strong>: 要标记的旧镜像名称和标签</li><li><strong><code>myproject:latest</code></strong>: 新的标签</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="暂停并移除服务" tabindex="-1">暂停并移除服务 <a class="header-anchor" href="#暂停并移除服务" aria-label="Permalink to &quot;暂停并移除服务&quot;">​</a></h3><ol><li><strong><code>docker stop myproject</code></strong>: 停止名为 <strong><code>myproject</code></strong> 的 <code>Docker</code> 容器</li><li><strong><code>docker rm myproject</code></strong>: 删除名为 <strong><code>myproject</code></strong> 的 <code>Docker</code> 容器</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2333</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:3000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /root/logs:/usr/src/app/logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="运行-docker-服务" tabindex="-1">运行 Docker 服务 <a class="header-anchor" href="#运行-docker-服务" aria-label="Permalink to &quot;运行 Docker 服务&quot;">​</a></h3><ol><li><strong><code>docker run</code></strong>: 用于在新容器中运行一个命令</li><li><strong><code>-name myproject</code></strong>: 为新容器指定名称为 <strong><code>myproject</code></strong></li><li><strong><code>p 2333:3000</code></strong>: 将主机的端口 <code>2333</code> 映射到容器的端口 <code>3000</code></li><li><strong><code>d</code></strong>: 在后台运行容器</li><li><strong><code>v /root/logs:/usr/src/app/logs</code></strong>: 将主机上 <strong><code>/root/logs</code></strong> 目录挂载到容器内的 <strong><code>/usr/src/app/logs</code></strong> 目录</li><li><strong><code>-restart always</code></strong>: 设置容器总是自动重启</li><li><strong><code>myproject</code></strong>: 要运行的 <code>Docker</code> 镜像的名称和标签</li></ol><p>部署完后可以通过以下方式访问服务接口</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>x.x.x.x:2333/path</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,31),r=[l];function t(o,p,c,d,h,k){return a(),i("div",null,r)}const u=s(n,[["render",t]]);export{b as __pageData,u as default};
