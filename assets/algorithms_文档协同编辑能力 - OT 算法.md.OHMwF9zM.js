import{_ as s,c as i,o as a,a5 as e}from"./chunks/framework.Ce6iPXhF.js";const n="/assets/01.BetFSQds.png",l="/assets/02.BLpKmNtT.png",t="/assets/03.BX7XDV_E.png",p="/assets/04.B_-VQMRy.png",h="/assets/05.D2pSG6VG.png",k="/assets/06.C2aUdplm.png",r="/assets/07.DlfxGgqu.png",d="/assets/08.C3WERsd4.png",o="/assets/09.DSndvLvo.png",c="/assets/10.CVpNhq4d.png",E="/assets/11.cxXbjPiJ.png",g="/assets/12.CgX_XCuv.png",y="/assets/13.CrESNCnh.png",F="/assets/14.Brj70KFR.png",m="/assets/15.BZIvraFJ.png",b="/assets/16.Bs1rjv2d.png",u="/assets/17.DPM8jOKh.png",C="/assets/18.CX3aoDfs.png",B="/assets/19.BRNyt-pn.png",_="/assets/20.BGIq6QBd.png",v="/assets/21.DFB5PgcB.png",D="/assets/22.DJrLCsVx.png",q="/assets/23.xrBG7PYT.png",T="/assets/24.BNpM2xSM.png",A="/assets/25.DBSKPS3A.png",G=JSON.parse('{"title":"文档协同编辑能力 - OT 算法","description":"","frontmatter":{},"headers":[],"relativePath":"algorithms/文档协同编辑能力 - OT 算法.md","filePath":"algorithms/文档协同编辑能力 - OT 算法.md","lastUpdated":1713322810000}'),f={name:"algorithms/文档协同编辑能力 - OT 算法.md"},O=e('<h1 id="文档协同编辑能力-ot-算法" tabindex="-1">文档协同编辑能力 - OT 算法 <a class="header-anchor" href="#文档协同编辑能力-ot-算法" aria-label="Permalink to &quot;文档协同编辑能力 - OT 算法&quot;">​</a></h1><h3 id="🗿-认识协同编辑" tabindex="-1">🗿 认识协同编辑 <a class="header-anchor" href="#🗿-认识协同编辑" aria-label="Permalink to &quot;🗿 认识协同编辑&quot;">​</a></h3><h3 id="🤔-什么是协同编辑" tabindex="-1">🤔 什么是协同编辑 <a class="header-anchor" href="#🤔-什么是协同编辑" aria-label="Permalink to &quot;🤔 什么是协同编辑&quot;">​</a></h3><p>协同编辑是指多个用户同时对同一个文档或项目进行编辑和修改的过程。在协同编辑中，多个用户可以在实时或异步的情况下共同编辑文档并观察其他用户的编辑内容。</p><p>👌 协同编辑好处</p><ul><li>实时协作</li><li>提高生产力</li><li>减少冲突和错误</li><li>简化版本控制</li></ul><p>那如何实现协同编辑呢❓ 这里主要用到了协作算法 <code>OT</code> 市场上有很多文档使用了 <code>OT</code> 算法 ，例如：</p><ul><li>讯飞文档</li><li>石墨文档</li><li>腾讯文档</li><li>Google Docs</li></ul><h2 id="🤖-认识-ot-算法" tabindex="-1">🤖 认识 OT 算法 <a class="header-anchor" href="#🤖-认识-ot-算法" aria-label="Permalink to &quot;🤖 认识 OT 算法&quot;">​</a></h2><p>🙋🏻‍♂️ 先来看看有哪些处理冲突的方式</p><ol><li>加锁：某一文档或段落同时只运行一个用户编辑，例如用户 <code>A</code> 在编辑时，就锁住文档或段落，只能 <code>A</code> 进行更新。用户 <code>B</code> 就不能编辑，或编辑后提交修改被服务器丢弃； <img src="'+n+'" alt="image"></li><li>覆盖： 谁最后修改，就全量使用他的修改，更早一些的其他人的修改会被丢弃； <img src="'+l+'" alt="image"></li><li>用户自行处理冲突： 就像 <code>git merge/rebase</code> 导致的冲突一样，会提示哪个地方被同时修改了，让合并者手动选择使用哪一个修改；</li><li>使用一致性算法： 比如接下来要介绍的 <code>OT</code> 算法，多用户编辑进行算法处理调整，在多个客户端生成一致的修改结果。</li></ol><h3 id="什么是-ot-算法" tabindex="-1">什么是 OT 算法 <a class="header-anchor" href="#什么是-ot-算法" aria-label="Permalink to &quot;什么是 OT 算法&quot;">​</a></h3><p><code>OT （ Operational Transformation ）</code>, 是一种基于操作转换的协同冲突处理的收敛算法； 它的基本原理是通过对操作的转换和合并，确保多个用户同时编辑时的最终结果上的一致性。</p><h3 id="操作" tabindex="-1">操作 <a class="header-anchor" href="#操作" aria-label="Permalink to &quot;操作&quot;">​</a></h3><p>这里的 操作 指的对文档的编辑，在 <code>OT</code> 里面对文档定义了三种操作：</p><blockquote><ol><li>insert 插入操作</li><li>retain 保留操作</li><li>delete 删除操作</li></ol></blockquote><p>e.g. 插入 insert <img src="'+t+'" alt="image"> e.g. 保留 retain <img src="'+p+'" alt="image"> e.g. 删除 delete <img src="'+h+'" alt="image"></p><p>那 <strong>转换</strong> 和 <strong>合并</strong> 指的什么呢？ 继续往下 ⬇️</p><h3 id="💭-首先看下协同编辑为什么需要-ot-算法" tabindex="-1">💭 首先看下协同编辑为什么需要 OT 算法 <a class="header-anchor" href="#💭-首先看下协同编辑为什么需要-ot-算法" aria-label="Permalink to &quot;💭 首先看下协同编辑为什么需要 OT 算法&quot;">​</a></h3><p>举个 🌰 ，多人编辑在没有 <code>OT</code> 算法会出现什么情况 假设现在一个协作的文档初始内容是 <code>hello</code> ，甲乙都在同时编辑，甲端用户在 <code>hello</code> 后面插入了一个 <code>a</code> ，乙端用户在 <code>hello</code> 后面插入了一个 <code>b</code> ;</p><p>1️⃣ 对于甲客户端：</p><blockquote><ol><li>插入了 <code>a</code> 后，文档内容变成 <code>helloa</code></li><li>然后接收到 乙端 的消息， 在 <code>helloa</code> 后面插入 <code>b</code></li><li>最终文档内容变为 <code>helloba</code></li></ol></blockquote><p><img src="'+k+'" alt="image"></p><p>2️⃣ 对于乙客户端：</p><blockquote><ol><li>插入了 <code>b</code> 后，文档内容变成 <code>hellob</code></li><li>然后接收到 甲端 的消息， 在 <code>hellob</code> 后面插入 <code>a</code></li><li>最终文档内容变为 <code>helloab</code></li></ol></blockquote><p><img src="'+r+'" alt="image"></p><p>将上述内容的量化为模型图 ：</p><p><img src="'+d+'" alt="image"></p><p>此时这时候 甲 乙 双端已经不一致了，即产生了冲突。</p><h3 id="解决冲突-transfrom" tabindex="-1">解决冲突 Transfrom <a class="header-anchor" href="#解决冲突-transfrom" aria-label="Permalink to &quot;解决冲突 Transfrom&quot;">​</a></h3><p>继续上述的 🌰 ：</p><p>甲乙 内容出现了不一致， 那谁应该才是正确的呢 ？ 对于 <code>OT</code> 算法强调是最终一致性， 所以 <code>helloab</code> 或 <code>helloba</code> 似乎看起来都是正确的。</p><p>但是从<strong>服务端视角</strong>来看, 先到的操作先应用原则：</p><p><strong>假如 甲 操作先到达服务端， 乙 操作后到达服务端：</strong></p><p><img src="'+o+'" alt="image"></p><blockquote><p>甲端 内容先变成 <code>helloa</code>，准备应用 <code>O2</code> 操作(乙) ，先与 <code>O1</code> 操作进行一个转换 <code>O2&#39; = Transfrom(O2, O1) = insert(6, &#39;b&#39;)</code> , 因为在 <code>O2</code> 操作前， <code>O1</code> 在位置 <code>5</code> 已经插了一个字符， 所以 需要将位置 <code>+1</code> ，再应用转换后的 <code>O2&#39;</code></p></blockquote><p><img src="'+c+'" alt="image"></p><blockquote><p>乙端 内容先变成 <code>hellob</code>, 准备应用 <code>O1</code> 操作(甲)，先与 <code>O2</code> 操作进行一个转换 <code>O1&#39; = Transfrom(O1, O2) = insert(5, &#39;a&#39;)</code> , 因为 甲操作在先，在第 <code>5</code> 位置插入 <code>a</code> 对乙操作其实不会有影响</p></blockquote><p><img src="'+E+'" alt="image"></p><p>如果 乙 操作先到达服务端， 甲 操作后到达服务端，情况就正好与上面相反</p><p>从上面的案例看出</p><ul><li><code>Transfrom</code> 是核心解决冲突的所在，对操作进行转换；同时也可看出 时序性对 <code>OT</code> 的算法的重要性， 这个确定了操作之间应该如何去转换。</li><li><code>Transfrom</code> 操作既发生在服务端：将基于某个版本的并发操作对象转换成串行操作；也发生在客户端，本地的修改还没来得及提交，就收到了服务端推送。</li></ul><p>同时上面的案例是一个并行插入冲突的实例，还有常见的并行删除操作冲突、插入和删除操作的冲突等；</p><p><strong>并行删除操作：</strong> 同时在同一位置进行删除操作</p><p><img src="'+g+'" alt="image"></p><p><strong>插入和删除操作：</strong> 同时在同一位置进行新增和删除操作</p><p><img src="'+y+'" alt="image"></p><h3 id="数据合并-compose" tabindex="-1">数据合并 compose <a class="header-anchor" href="#数据合并-compose" aria-label="Permalink to &quot;数据合并 compose&quot;">​</a></h3><blockquote><p>合并操作</p></blockquote><ul><li>合并操作序列</li><li>合并操作到文档</li></ul><p>举个 🌰 文档初始内容为 <code>hello</code></p><ol><li>甲用户先在 <code>hello</code> 后面(第 <code>5</code> 位置)插入了 <code>world</code></li><li>在 <code>helloworld</code> 后面（第 <code>10</code> 位置）插入了 ！</li><li>删除了 <code>world</code> (从第 <code>5</code> 位置开始到第 <code>10</code> 位置)</li><li>在 <code>hello</code> 后面(第 <code>5</code> 位置)插入了 <code>ot</code></li></ol><br><p>如果将 <code>4</code> 步操作合并为 <code>1</code> 步操作：</p><ol><li>在 <code>hello</code> 后面插入了 <code>ot!</code><img src="'+F+'" alt="image"></li></ol><p>需要 <strong>compose</strong> 的场景：</p><ol><li>短时间内频繁的操作可以进行合并，以减少提交次数以及版本数</li><li>离线编辑是大量的操作可以进行合并</li><li>历史记录查看一段时间内的操作集合</li><li>应用到文档中</li></ol><h3 id="👓-可视化示例-基于-otjs-和-codemiror-编辑器实现" tabindex="-1">👓 可视化示例 （基于 OTjs 和 CodeMiror 编辑器实现）： <a class="header-anchor" href="#👓-可视化示例-基于-otjs-和-codemiror-编辑器实现" aria-label="Permalink to &quot;👓 可视化示例 （基于 OTjs 和 CodeMiror 编辑器实现）：&quot;">​</a></h3><p><code>Visualization of OT with a central server (operational-transformation.github.io)</code></p><h2 id="🤏-ot-算法在文档中的应用-delta" tabindex="-1">🤏 OT 算法在文档中的应用 - Delta <a class="header-anchor" href="#🤏-ot-算法在文档中的应用-delta" aria-label="Permalink to &quot;🤏 OT 算法在文档中的应用 - Delta&quot;">​</a></h2><p>文档中的文字文档采用的是 <code>Quill</code> 富文本编辑器 如下图 <code>Quill</code> 简化的架构：</p><ul><li>Quill Core ： Formats 、插件模块、主题等</li><li>Delta ：富文本数据层，负责描述数据</li><li>Parchment ：富文本控制器层，可以理解为抽象的 dom</li></ul><p><img src="'+m+'" alt="image"></p><h2 id="delta" tabindex="-1">Delta <a class="header-anchor" href="#delta" aria-label="Permalink to &quot;Delta&quot;">​</a></h2><p><code>Delta</code> 主要负责文本操作和格式化。是基于 <code>OT</code> 算法实现。</p><p><img src="'+b+`" alt="image"></p><h2 id="数据结构-设计规范" tabindex="-1">数据结构 / 设计规范 <a class="header-anchor" href="#数据结构-设计规范" aria-label="Permalink to &quot;数据结构 / 设计规范&quot;">​</a></h2><p><code>Delta</code> 中数据插入类型分为 纯文本 与 <code>embed</code> 嵌入式内容。通过 <code>attributes</code> 区分不同的表现形式，应用场景例如我们常见的 标题、加粗、斜体、列表等。</p><ul><li>扁平化数据</li><li>紧凑型</li></ul><h3 id="扁平化数据" tabindex="-1">扁平化数据 <a class="header-anchor" href="#扁平化数据" aria-label="Permalink to &quot;扁平化数据&quot;">​</a></h3><p><code>Delta</code> 中数据都是扁平的，没有子节点。那他如何表达 文档 <code>Dom</code> 树结构的？ 关键在于 <code>Quill</code> 假定富文本不存在块元素的嵌套，即一行中不能同时存在标题和列表。遇到换行符则新建一行作为块级别 <code>tag open</code> ，直到遇到下一个换行符，作为 <code>tag close</code> 。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attributes: { bold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    insert: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      image: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://quilljs.com/logo.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attributes: { width: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;100&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>如上述代码中 image 就是一个 embed 类型，这种嵌入类型的文本长度为 <code>1</code> , 类似于一个文字长度。</p></blockquote><h3 id="紧凑型" tabindex="-1">紧凑型 <a class="header-anchor" href="#紧凑型" aria-label="Permalink to &quot;紧凑型&quot;">​</a></h3><p>必须约定 <code>Delta</code> 中的数据格式标识形式，同一个富文本仅有一种数据表示形式，否则同一种数据可能存在不同表示，例如表示 <code>Hello Word</code> 的不紧凑形式：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;lo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, attributes: { bold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>下面的方式更明确，易于理解和维护：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { insert: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, attributes: { bold: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="部分核心算法实现" tabindex="-1">部分核心算法实现 <a class="header-anchor" href="#部分核心算法实现" aria-label="Permalink to &quot;部分核心算法实现&quot;">​</a></h3><p><strong>🍗 Push</strong></p><ul><li>Insert 插入</li><li>Retain 保留</li><li>Delete 删除</li></ul><p>主要是处理富文本操作的一些场景，核心主要是一下：</p><ul><li>连续的 <code>insert</code> 、 <code>retain</code> 、 <code>delete</code> 需要判断做合并操作，对于 <code>insert</code> 、<code>retain</code> 则是 <code>attrs</code> 相同且 <code>insert</code> 都为 <code>string</code> 即可合并，</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例如</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// push后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;helloworld&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+u+`" alt="image"></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例如</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;world&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// push后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;helloworld&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+C+'" alt="image"></p><ul><li><code>delete</code> 之后的 <code>insert</code> ，会做顺序调整， 规范是放到 <code>insert</code> 后面（因为由于在同一索引处的删除之前或之后插入并不重要，因此始终倾向于先插入）；</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+B+`" alt="image"></p><ul><li>其他场景则直接 <code>push ops</code> 即可。 这主要是为了 <code>ops</code> 数据格式的一致性，为了之后的各种操作运算做逻辑统一化处理。</li></ul><p><strong>🍟 Compose 合并操作</strong> compose 合并文档，中有几条原则，决定计算规则：</p><ul><li><code>insert</code> / <code>delete</code> / <code>retain</code> ，类型相同时选择性直接合并；</li><li><code>insert</code> 优先于 <code>delete</code> ；</li><li><code>delete</code> 、 <code>retain</code> 同时存在时，按先后顺序执行；</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;o&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+_+`" alt="image"></p><p><strong>🍔 Transform 转化</strong></p><p>根据已有的 <code>Delta</code> 操作转换给定的 <code>Delta</code> 。 示例如下：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;12&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;34&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// new</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ab&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="`+v+'" alt="image"></p><p>该方法也是解决冲突的核心方法， <code>transform</code> 方法内部通过 <code>Delta</code> 数据建立两个单链表通过比较两个对象的操作序列，并根据一定的规则进行变换，从而解决冲突并保持编辑操作的一致性。</p><blockquote><p>下面的 ①②③④ 指的遍历次数</p></blockquote><p><img src="'+D+'" alt="image"></p><blockquote><p>e.g. 文档处理中文输入中间态 composition</p></blockquote><p><img src="'+q+'" alt="image"></p><p>来自讯飞文档中一些经验说 讯飞文档对富文本编辑器其实做了大量的定制化开发和优化；</p><ul><li>中文输入法适配 <img src="'+T+'" alt="image"></li><li>扩展组件： 例如附件预览、多<code>meta</code>信息的图片以及图片操作、@功能</li><li>版本兼容</li><li>系统适配</li><li>大文档的性能优化： 数据懒加载</li><li>移动端适配</li><li>离线数据一致性问题 <img src="'+A+'" alt="image"></li><li>等等 ...</li></ul><p>富文本编辑器本身也是一个很复杂的模块，感兴趣的我们可以会后继续探讨 🔬。</p><h2 id="📡-拓展-crdt-算法以及-yjs" tabindex="-1">📡 拓展: CRDT 算法以及 Yjs <a class="header-anchor" href="#📡-拓展-crdt-算法以及-yjs" aria-label="Permalink to &quot;📡 拓展: CRDT 算法以及 Yjs&quot;">​</a></h2><p><code>CRDT</code>（Conflict-free Replicated Data Type，无冲突复制数据类型）算法的核心思想是确保所有副本之间的数据一致性，而无需进行复杂的操作转换。</p><p><code>CRDT</code>算法的关键思想是将数据结构设计成满足局部操作的可交换性和结合性。这意味着每个节点可以自主地对其本地副本进行修改，并通过将其修改操作与其他节点的操作合并，最终实现数据一致性。</p><p><code>Yjs</code> 一款强大的基于 <code>CRDT</code> 算法实现的协同编辑 <code>JavaScript</code> 库</p><ul><li>数据操作要满足交换律、结合律和幂等性</li><li>基于 <code>YATA</code> 算法的并发冲突解决机制</li></ul>',112),j=[O];function w(P,x,S,R,V,N){return a(),i("div",null,j)}const M=s(f,[["render",w]]);export{G as __pageData,M as default};
