import{_ as e,c as o,o as d,a5 as c}from"./chunks/framework.Ce6iPXhF.js";const a="/assets/02.B5oQLviV.jpg",b=JSON.parse('{"title":"记录一次前端输入框引发的抖动 Bug 修复","description":"","frontmatter":{},"headers":[],"relativePath":"daily/2024/记录一次前端输入框引发的抖动 Bug 修复.md","filePath":"daily/2024/记录一次前端输入框引发的抖动 Bug 修复.md","lastUpdated":1713322810000}'),t={name:"daily/2024/记录一次前端输入框引发的抖动 Bug 修复.md"},l=c('<h1 id="记录一次前端输入框引发的抖动-bug-修复" tabindex="-1">记录一次前端输入框引发的抖动 Bug 修复 <a class="header-anchor" href="#记录一次前端输入框引发的抖动-bug-修复" aria-label="Permalink to &quot;记录一次前端输入框引发的抖动 Bug 修复&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>最近接到一个 AI 公文助手输入优化的需求，需要对 <code>UI</code> 进行改版。发现这个表单处的输入框体验非常不好，于是改为了项目中已引用的 <code>Element-UI</code> 组件库中的 <code>EL-Inpt</code>，改完后发现了问题，只要连续的输入就会出现页面抖动的现象。于是我知道了之前为什么不用组件库中的 <code>EL-Inpt</code> 而是自己写了一个不好用的输入框组件了（🤪）。</p><blockquote><p>如图： 右侧表单填写内容，会导致左侧红色框整体都在抖动 <img src="'+a+'" alt="img"></p></blockquote><p>当然自己重新写一个好用的组件是一个好办法，但是重新造轮子 。。。 也是个好办法。</p><p>那还是需要去看下具体是什么原因导致的这个抖动。</p><h2 id="问题分析定位" tabindex="-1">问题分析定位 <a class="header-anchor" href="#问题分析定位" aria-label="Permalink to &quot;问题分析定位&quot;">​</a></h2><h3 id="从-html5-层进行排查" tabindex="-1">从 HTML5 层进行排查 <a class="header-anchor" href="#从-html5-层进行排查" aria-label="Permalink to &quot;从 HTML5 层进行排查&quot;">​</a></h3><ol><li><p>第一步：<code>F12</code> 进行 <code>CSS</code> debug ，查看右侧表单输入时，<code>CSS</code> 变化，发现右侧表单宽度未发生异常，但是左侧区域出现了 <code>10px</code> 的抖动</p></li><li><p>第二步：怀疑是我们的布局有问题，于是固定右侧的布局宽度以及将左侧布局直接替换为一个 <code>Div</code>，发现还是会抖动。其实前面提到替换为 <code>EL-Inpt</code> 后出现了抖动、那么大概率也就是这个组件引起的原因。</p></li><li><p>第三步：大概率确定就是 <code>EL-Inpt</code> 组件出了问题，于是将 <code>EL-Inpt</code> 的布局中最外层的 <code>Div</code> 移除掉 （ <code>EL-Inpt</code> 组件的布局是 <code>Div -&gt; textarea</code> ），发现抖动也消失了。基本确定就是 <code>EL-Inpt</code> 导致的。</p></li><li><p>第四步：去 <code>Github</code> 上 <code>Element-UI</code>仓库看了下 <code>issue</code> 好像没发现类似的问题，看来还是比较不好复现的 🤪，接着大致看了下 <code>EL-Inpt</code> 组件的实现，发现 <code>calcTextareaHeight.js</code> 中在计算动态输入框高度时会在内容变动时新建了一个隐藏的 <code>Textarea</code> 元素用于计算高度，然后又移除掉，感觉这里很可疑，于是准备先从这里下手。</p></li><li><p>第五步：继续回到项目中找到 <code>calcTextareaHeight.js</code> 文件</p></li></ol><h3 id="从项目中调式排查" tabindex="-1">从项目中调式排查 <a class="header-anchor" href="#从项目中调式排查" aria-label="Permalink to &quot;从项目中调式排查&quot;">​</a></h3><ol start="6"><li><p>第六步：项目是基于 Vite 的，为了好验证直接在项目中调试。</p><ul><li><p><code>Element-UI</code> 下 <code>node_modules/element-ui/lib/input.js</code> 文件是打包后的 <code>EL-Inpt</code> 实现，整体阅读性还好，可以参考着 <code>node_modules/element-ui/packages/input</code> 源码进行阅读，将 <code>calcTextareaHeight.js</code> 中的创建的隐藏域的 <code>Textarea</code> 直接移除掉；</p></li><li><p>将 <code>node_modules/.vite/deps</code> 文件夹下的文件全部删掉（这个是调式的缓存的 <code>chunk</code> 文件，<code>Vite</code> 之所以高效，多半也是因为如此），然后重新刷新项目，Vite 会继续打包缓存 <code>node_modules/element-ui/lib/input.js</code> 文件到 <code>node_modules/.vite/deps</code> 中； 发下此时不在抖动，也发现问题了， 隐藏域的 <code>Textarea</code> 创建时直接挂载到 <code>document</code> 上，然后在进行样式属性的赋值，这导致在挂载到 <code>document</code> 时，<code>Textarea</code> 占据了一些位置导致左侧视图被挤，导致抖动。</p></li><li><p>继续上面的步骤，这次只是将 隐藏域的 <code>Textarea</code> 进行了隐藏，问题解决； 当然这里也可以设置让它浮动等等其他方式，在创建时不占空间。</p></li></ul></li></ol><h2 id="解决问题" tabindex="-1">解决问题 <a class="header-anchor" href="#解决问题" aria-label="Permalink to &quot;解决问题&quot;">​</a></h2><ol><li><s>Hook ？，似乎不是那么方便</s></li><li><s>Fork 一份 <code>Element-UI</code> 到私有 <code>Git</code> 仓库，然后进行源码修改，再 <code>npm publish</code> 到 <code>npm</code> 私有仓库 ？ 但是这样每次更新组件很麻烦，而且还受网络环境影响</s></li><li>这里直接仿照 <code>EL-Inpt</code> 实现重新写了一份组件，满足各种各样的需求</li></ol>',13),i=[l];function n(r,s,p,_,u,h){return d(),o("div",null,i)}const g=e(t,[["render",n]]);export{b as __pageData,g as default};
